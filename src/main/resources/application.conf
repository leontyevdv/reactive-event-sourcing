akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = DEBUG

  log-config-on-start = off

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
      unhandled = on
      loglevel = "DEBUG"
    }

    provider = "cluster"

    enable-additional-serialization-bindings = on
    allow-java-serialization = on //only for prototyping, turn off for production deployment
    warn-about-java-serializer-usage = off //turn on for production deployment
  }

  cluster {
    seed-nodes = ["akka://oddsystems-cinema@127.0.0.1:2551"]
  }

  remote {
    log-remote-lifecycle-events = on //off

    artery {
      canonical.hostname = 127.0.0.1
      canonical.port = 2551
    }
  }

  persistence.journal.plugin = "jdbc-journal"
}

jdbc-journal {
  slick = {
    profile = "slick.jdbc.PostgresProfile$"
    db {
      host = "localhost"
      port = "5432"
      dbName = "postgres"
      url = "jdbc:postgresql://"${jdbc-journal.slick.db.host}":"${jdbc-journal.slick.db.port}"/"${jdbc-journal.slick.db.dbName}"?reWriteBatchedInserts=true"
      user = "admin"
      password = "admin"
      driver = "org.postgresql.Driver"
    }
  }
}
